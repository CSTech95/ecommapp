version: "3.8"
services:
    auth_service:
        build:
            #context: ./auth_service
            dockerfile: ./auth_service/Dockerfile
        container_name: auth_service
        depends_on:
            - postgres_db
        ports:
            - 3101:3101
        environment:
            JWT_SECRET: tinker
            PGHOST: postgres_db
            DB_USERNAME: postgres
            DB_PASSWORD: postgres
            DB_NAME: user
        #command: npm start

        volumes:
            - ./auth_service:/usr/src/app/
            - /usr/src/app/node_modules

    postgres_db:
        image: postgres:15
        restart: unless-stopped
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=user
        ports:
            - "5432:5432"
        volumes:
            #TODO Enable init script below
            # When the PostgreSQL container is started it will run any scripts
            # provided in the `docker-entrypoint-initdb.d` directory, this connects
            # our seed file to that directory so that it gets run
            - ./database-seed.sql:/docker-entrypoint-initdb.d/database-seed.sql

    product_service:
        build:
            #context: ./auth_service
            dockerfile: ./product_service/Dockerfile
        container_name: product_service
        depends_on:
            - postgres_db
        ports:
            - 3000:3000
        environment:
            JWT_SECRET: tinker
            PGHOST: postgres_db
            DB_USERNAME: postgres
            DB_PASSWORD: postgres
            DB_Name: product
        #command: npm start

        volumes:
            - ./product_service:/usr/src/app/
            - /usr/src/app/node_modules

    shoppingcart_service:
        build:
            dockerfile: ./shoppingcart_service/Dockerfile
        container_name: shoppingcart_service
        depends_on:
            - postgres_db
        ports:
            - 3950:3950
        environment:
            JWT_SECRET: tinker
            PGHOST: postgres_db
            DB_USERNAME: postgres
            DB_PASSWORD: postgres
            DB_NAME: shoppingcart
        #command: npm start

        volumes:
            - ./shoppingcart_service:/usr/src/app/
            - /usr/src/app/node_modules

    order_service:
        build:
            dockerfile: ./order_service/Dockerfile
        container_name: order_service
        restart: always
        depends_on:
            - postgres_db
            - rabbitmq
        ports:
            - 3130:3130
        environment:
            JWT_SECRET: tinker
            PGHOST: postgres_db
            DB_USERNAME: postgres
            DB_PASSWORD: postgres
            DB_NAME: order
            AMQP_URL: amqp://guest:guest@rabbitmq:5672
            ORDER_EXCHANGE_NAME: ORDER_EXCHANGE
            ORDER_ROUTING_KEY: order_key
        #command: npm start

        volumes:
            - ./order_service:/usr/src/app/
            - /usr/src/app/node_modules

    shipping_service:
        build:
            dockerfile: ./shipping_service/Dockerfile
        container_name: shipping_service
        restart: always
        depends_on:
            - postgres_db
            - rabbitmq
        ports:
            - 3777:3777
        environment:
            JWT_SECRET: tinker
            PGHOST: postgres_db
            DB_USERNAME: postgres
            DB_PASSWORD: postgres
            DB_NAME: shipment
            AMQP_URL: amqp://guest:guest@rabbitmq:5672
            ORDER_EXCHANGE_NAME: ORDER_EXCHANGE
            SHIPPING_QUEUE_NAME: shipping_queue
            SHIPPING_MESSAGE_KEY: order_key
        #command: npm start

        volumes:
            - ./shipping_service:/usr/src/app/
            - /usr/src/app/node_modules

    rabbitmq:
        image: rabbitmq:3-management
        restart: always
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
            - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        environment:
            #RABBITMQ_NODE_IP_ADDRESS:
            - "RABBITMQ_DEFAULT_USER=guest"
            - "RABBITMQ_DEFAULT_PASS=guest"
#        networks:
#            - rabbitmq_nodejs
#networks:
#    rabbitmq_nodejs:
#        driver: bridge
